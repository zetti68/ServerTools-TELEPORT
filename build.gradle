buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'org.ajoberstar:gradle-git:0.10.1'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    }
}

apply plugin: 'forge'
apply plugin: 'maven-publish'
apply plugin: 'curseforge'
apply plugin: 'license'

def version_build = 'UNKNOWN'
if (System.getenv('BUILD_NUMBER') != null)
    version_build = System.getenv('BUILD_NUMBER')

version = "${minecraft_version}-${mod_version}.${version_build}"

group = 'info.servertools.teleport'
archivesBaseName = 'ServerTools-TELEPORT'

import org.ajoberstar.grgit.Grgit

def gitHash = null
if (new File(projectDir, '.git').exists()) {
    def repo = Grgit.open(project.file('.'))
    gitHash = repo.log().find().abbreviatedId
}

minecraft {
    version = minecraft_version + '-' + forge_version
    runDir = 'run'
    mappings = project.mappings_version
}

repositories {
    maven { url 'http://maven.matthewprenger.com/' }
}

dependencies {
    compile "info.servertools.core:ServerTools-CORE:${st_core_version}:deobf"

    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:1.9.0'
}

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", minecraft_version

    from 'LICENSE.txt'

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand 'version': project.version, 'mcversion': minecraft_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}
jar {
    manifest.mainAttributes(
            "Built-By": System.getProperty('user.name'),
            "Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Git-Hash": gitHash
    )
}

license {
    ext.name = project.name
    ext.organization = project.organization
    ext.url = project.url
    ext.year = project.inceptionYear
    exclude '**/*.info'
    exclude '**/*.json'
    header new File(projectDir, 'HEADER.txt')
    sourceSets = project.sourceSets
    ignoreFailures = false
    strictCheck = true
    mapping { java = 'SLASHSTAR_STYLE' }
}


task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

tasks.build.dependsOn sourceJar, javadocJar, deobfJar

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar
            artifact javadocJar
            artifact deobfJar
        }
    }

    repositories {
        if (project.hasProperty('maven_url')) {
            maven { url maven_url }
        }
    }
}

curse {
    dependsOn 'reobf'
    onlyIf { return project.hasProperty('curseforge_key') }

    if (project.hasProperty('curseforge_key')) apiKey = project.curseforge_key
    projectId = '220715'
    changelog = ''
    releaseType = 'release'
}
tasks.curse.mustRunAfter('publish')