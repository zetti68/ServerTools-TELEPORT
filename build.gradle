/* Constants Start */

def versionMajor = 2
def versionMinor = 0
def versionRev = 1
def versionBuild = 0

def minecraftVersion = '1.7.2'
def forgeVersion = '10.12.1.1082'
def STCoreVersion = '2.0.1.21'

/* Constantes End */

buildscript {
    repositories {
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies { classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT' }
}

if (System.getenv('BUILD_NUMBER') != null)
    versionBuild = System.getenv('BUILD_NUMBER')

version = "${minecraftVersion}-${versionMajor}.${versionMinor}.${versionRev}.${versionBuild}"
def actualVersion = "${versionMajor}.${versionMinor}.${versionRev}.${versionBuild}"

apply plugin: 'forge'
apply plugin: 'maven-publish'

group = 'com.matthewprenger.servertools.teleport'
archivesBaseName = 'ServerTools-TELEPORT'

minecraft {
    version = minecraftVersion + '-' + forgeVersion
    assetDir = 'run/assets'

    replace '@VERSION_MAJOR@', versionMajor
    replace '@VERSION_MINOR@', versionMinor
    replace '@VERSION_REV@', versionRev
    replace '@VERSION_BUILD@', versionBuild
    replace '@MCVERSION@', minecraftVersion
    replace '@MIN_CORE@', STCoreVersion

    if (project.hasProperty('st_keystore_cf'))
        replace '@FINGERPRINT@', project.st_keystore_cf
}

repositories {
    mavenCentral()
    maven { url = 'http://maven.matthewprenger.com' }
}

dependencies {
    compile "com.matthewprenger.servertools.core:ServerTools-CORE:${minecraftVersion}-${STCoreVersion}:deobf"
}

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

jar.manifest {
    attributes 'Specification-Version': actualVersion
    attributes 'Specification-Title': project.name
}

processResources {
    inputs.property "version", actualVersion
    inputs.property "mcversion", minecraftVersion

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand 'version':actualVersion, 'mcversion': minecraftVersion
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

tasks.build.dependsOn sourceJar, javadocJar, deobfJar

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourceJar
            artifact javadocJar
            artifact deobfJar

            artifact source: file("build/distributions/${project.getName()}-${project.version}-changelog.txt"), classifier: 'changelog'
        }
    }

    repositories {
        if (project.hasProperty('mavendir')) {
            maven {
                url mavendir
            }
        }
    }
}

import net.minecraftforge.gradle.tasks.dev.ChangelogTask
import net.minecraftforge.gradle.delayed.DelayedString
import net.minecraftforge.gradle.delayed.DelayedFile

task changeLog(type: ChangelogTask) {
    onlyIf {project.hasProperty('jenkins_user')}
    if(project.hasProperty('jenkins_user')) {

        def jobName = "${System.getenv().JOB_NAME}"
        def buildNumber = "${System.getenv().BUILD_NUMBER}"

        setServerRoot(new DelayedString(project, 'http://direct.matthewprenger.com:8080/'))
        setJobName(new DelayedString(project, jobName.toString()))
        setAuthName(new DelayedString(project, project.jenkins_user))
        setAuthPassword(new DelayedString(project, project.jenkins_pass))
        setTargetBuild({ buildNumber.toString() })
        setOutput(new DelayedFile(project, 'build/distributions/' + project.getName() + '-' + project.version + '-changelog.txt'))
    }
}
tasks.build.dependsOn('changeLog')

task signJar(dependsOn: 'jar') {
    onlyIf { return project.hasProperty('st_keystore') }

    doLast {
        ant.signjar(
                destDir: jar.destinationDir,
                jar: jar.getArchivePath(),
                alias: project.st_keystore_alias,
                keystore: project.st_keystore,
                storepass: project.st_keystore_pass,
                preservelastmodified: 'true'
        )
    }
}
tasks.build.dependsOn 'signJar'

task release(dependsOn: [build, signJar, publish])